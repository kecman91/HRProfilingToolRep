/**
 * This class is generated by jOOQ
 */
package org.gradle.tim1.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.tim1.Keys;
import org.gradle.tim1.Tim1;
import org.gradle.tim1.tables.records.TopicRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Topic extends TableImpl<TopicRecord> {

	private static final long serialVersionUID = 644322240;

	/**
	 * The reference instance of <code>tim1.topic</code>
	 */
	public static final Topic TOPIC = new Topic();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TopicRecord> getRecordType() {
		return TopicRecord.class;
	}

	/**
	 * The column <code>tim1.topic.idTopic</code>.
	 */
	public final TableField<TopicRecord, Integer> IDTOPIC = createField("idTopic", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>tim1.topic.name</code>.
	 */
	public final TableField<TopicRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>tim1.topic.mail</code>.
	 */
	public final TableField<TopicRecord, String> MAIL = createField("mail", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * Create a <code>tim1.topic</code> table reference
	 */
	public Topic() {
		this("topic", null);
	}

	/**
	 * Create an aliased <code>tim1.topic</code> table reference
	 */
	public Topic(String alias) {
		this(alias, TOPIC);
	}

	private Topic(String alias, Table<TopicRecord> aliased) {
		this(alias, aliased, null);
	}

	private Topic(String alias, Table<TopicRecord> aliased, Field<?>[] parameters) {
		super(alias, Tim1.TIM1, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TopicRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TOPIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TopicRecord> getPrimaryKey() {
		return Keys.KEY_TOPIC_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TopicRecord>> getKeys() {
		return Arrays.<UniqueKey<TopicRecord>>asList(Keys.KEY_TOPIC_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<TopicRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<TopicRecord, ?>>asList(Keys.TOPIC_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Topic as(String alias) {
		return new Topic(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Topic rename(String name) {
		return new Topic(name, null);
	}
}
