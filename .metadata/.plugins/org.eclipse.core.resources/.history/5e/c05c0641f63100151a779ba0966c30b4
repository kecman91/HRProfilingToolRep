/**
 * This class is generated by jOOQ
 */
package org.gradle.bioskopdb.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.bioskopdb.Bioskopdb;
import org.gradle.bioskopdb.Keys;
import org.gradle.bioskopdb.tables.records.FilmRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Film extends TableImpl<FilmRecord> {

	private static final long serialVersionUID = -1517161837;

	/**
	 * The reference instance of <code>bioskopdb.film</code>
	 */
	public static final Film FILM = new Film();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FilmRecord> getRecordType() {
		return FilmRecord.class;
	}

	/**
	 * The column <code>bioskopdb.film.idFilm</code>.
	 */
	public final TableField<FilmRecord, Integer> IDFILM = createField("idFilm", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.film.naziv</code>.
	 */
	public final TableField<FilmRecord, String> NAZIV = createField("naziv", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.film.trajanje</code>.
	 */
	public final TableField<FilmRecord, Integer> TRAJANJE = createField("trajanje", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.film.glumci</code>.
	 */
	public final TableField<FilmRecord, String> GLUMCI = createField("glumci", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>bioskopdb.film.3d</code>.
	 */
	public final TableField<FilmRecord, Byte> _3D = createField("3d", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

	/**
	 * Create a <code>bioskopdb.film</code> table reference
	 */
	public Film() {
		this("film", null);
	}

	/**
	 * Create an aliased <code>bioskopdb.film</code> table reference
	 */
	public Film(String alias) {
		this(alias, FILM);
	}

	private Film(String alias, Table<FilmRecord> aliased) {
		this(alias, aliased, null);
	}

	private Film(String alias, Table<FilmRecord> aliased, Field<?>[] parameters) {
		super(alias, Bioskopdb.BIOSKOPDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<FilmRecord, Integer> getIdentity() {
		return Keys.IDENTITY_FILM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<FilmRecord> getPrimaryKey() {
		return Keys.KEY_FILM_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<FilmRecord>> getKeys() {
		return Arrays.<UniqueKey<FilmRecord>>asList(Keys.KEY_FILM_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Film as(String alias) {
		return new Film(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Film rename(String name) {
		return new Film(name, null);
	}
}
