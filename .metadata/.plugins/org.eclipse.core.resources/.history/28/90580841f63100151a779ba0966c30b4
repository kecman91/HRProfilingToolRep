/**
 * This class is generated by jOOQ
 */
package org.gradle.bioskopdb.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.bioskopdb.Bioskopdb;
import org.gradle.bioskopdb.Keys;
import org.gradle.bioskopdb.tables.records.ProjekcijaRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projekcija extends TableImpl<ProjekcijaRecord> {

	private static final long serialVersionUID = 1053704890;

	/**
	 * The reference instance of <code>bioskopdb.projekcija</code>
	 */
	public static final Projekcija PROJEKCIJA = new Projekcija();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProjekcijaRecord> getRecordType() {
		return ProjekcijaRecord.class;
	}

	/**
	 * The column <code>bioskopdb.projekcija.idProjekcija</code>.
	 */
	public final TableField<ProjekcijaRecord, Integer> IDPROJEKCIJA = createField("idProjekcija", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.projekcija.idSala</code>.
	 */
	public final TableField<ProjekcijaRecord, Integer> IDSALA = createField("idSala", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.projekcija.idFilm</code>.
	 */
	public final TableField<ProjekcijaRecord, Integer> IDFILM = createField("idFilm", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.projekcija.datumVreme</code>.
	 */
	public final TableField<ProjekcijaRecord, Timestamp> DATUMVREME = createField("datumVreme", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.projekcija.cena</code>.
	 */
	public final TableField<ProjekcijaRecord, Integer> CENA = createField("cena", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>bioskopdb.projekcija</code> table reference
	 */
	public Projekcija() {
		this("projekcija", null);
	}

	/**
	 * Create an aliased <code>bioskopdb.projekcija</code> table reference
	 */
	public Projekcija(String alias) {
		this(alias, PROJEKCIJA);
	}

	private Projekcija(String alias, Table<ProjekcijaRecord> aliased) {
		this(alias, aliased, null);
	}

	private Projekcija(String alias, Table<ProjekcijaRecord> aliased, Field<?>[] parameters) {
		super(alias, Bioskopdb.BIOSKOPDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ProjekcijaRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PROJEKCIJA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProjekcijaRecord> getPrimaryKey() {
		return Keys.KEY_PROJEKCIJA_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProjekcijaRecord>> getKeys() {
		return Arrays.<UniqueKey<ProjekcijaRecord>>asList(Keys.KEY_PROJEKCIJA_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ProjekcijaRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ProjekcijaRecord, ?>>asList(Keys.PROJEKCIJA_IBFK_1, Keys.PROJEKCIJA_IBFK_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Projekcija as(String alias) {
		return new Projekcija(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Projekcija rename(String name) {
		return new Projekcija(name, null);
	}
}
