/**
 * This class is generated by jOOQ
 */
package org.gradle.dnevnik.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.dnevnik.Dnevnik;
import org.gradle.dnevnik.Keys;
import org.gradle.dnevnik.tables.records.IzostanakRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Izostanak extends TableImpl<IzostanakRecord> {

	private static final long serialVersionUID = 521615284;

	/**
	 * The reference instance of <code>dnevnik.izostanak</code>
	 */
	public static final Izostanak IZOSTANAK = new Izostanak();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<IzostanakRecord> getRecordType() {
		return IzostanakRecord.class;
	}

	/**
	 * The column <code>dnevnik.izostanak.idIzostanka</code>.
	 */
	public final TableField<IzostanakRecord, Integer> IDIZOSTANKA = createField("idIzostanka", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>dnevnik.izostanak.opravdan</code>.
	 */
	public final TableField<IzostanakRecord, Byte> OPRAVDAN = createField("opravdan", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

	/**
	 * The column <code>dnevnik.izostanak.datum</code>.
	 */
	public final TableField<IzostanakRecord, Date> DATUM = createField("datum", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * The column <code>dnevnik.izostanak.idCasa</code>.
	 */
	public final TableField<IzostanakRecord, Integer> IDCASA = createField("idCasa", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>dnevnik.izostanak</code> table reference
	 */
	public Izostanak() {
		this("izostanak", null);
	}

	/**
	 * Create an aliased <code>dnevnik.izostanak</code> table reference
	 */
	public Izostanak(String alias) {
		this(alias, IZOSTANAK);
	}

	private Izostanak(String alias, Table<IzostanakRecord> aliased) {
		this(alias, aliased, null);
	}

	private Izostanak(String alias, Table<IzostanakRecord> aliased, Field<?>[] parameters) {
		super(alias, Dnevnik.DNEVNIK, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<IzostanakRecord> getPrimaryKey() {
		return Keys.KEY_IZOSTANAK_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<IzostanakRecord>> getKeys() {
		return Arrays.<UniqueKey<IzostanakRecord>>asList(Keys.KEY_IZOSTANAK_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<IzostanakRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<IzostanakRecord, ?>>asList(Keys.IZOSTANAK_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Izostanak as(String alias) {
		return new Izostanak(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Izostanak rename(String name) {
		return new Izostanak(name, null);
	}
}
