/**
 * This class is generated by jOOQ
 */
package org.gradle.tim1.tables.records;


import javax.annotation.Generated;

import org.gradle.tim1.tables.Basket;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BasketRecord extends UpdatableRecordImpl<BasketRecord> implements Record2<String, Integer> {

	private static final long serialVersionUID = -707046821;

	/**
	 * Setter for <code>tim1.basket.mail</code>.
	 */
	public void setMail(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>tim1.basket.mail</code>.
	 */
	public String getMail() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>tim1.basket.idBasket</code>.
	 */
	public void setIdbasket(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>tim1.basket.idBasket</code>.
	 */
	public Integer getIdbasket() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Basket.BASKET.MAIL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Basket.BASKET.IDBASKET;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getMail();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getIdbasket();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BasketRecord value1(String value) {
		setMail(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BasketRecord value2(Integer value) {
		setIdbasket(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BasketRecord values(String value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached BasketRecord
	 */
	public BasketRecord() {
		super(Basket.BASKET);
	}

	/**
	 * Create a detached, initialised BasketRecord
	 */
	public BasketRecord(String mail, Integer idbasket) {
		super(Basket.BASKET);

		setValue(0, mail);
		setValue(1, idbasket);
	}
}
