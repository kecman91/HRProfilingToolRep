/**
 * This class is generated by jOOQ
 */
package org.gradle.blogdb.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.blogdb.Blogdb;
import org.gradle.blogdb.Keys;
import org.gradle.blogdb.tables.records.BlogRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blog extends TableImpl<BlogRecord> {

	private static final long serialVersionUID = 1051433664;

	/**
	 * The reference instance of <code>blogdb.blog</code>
	 */
	public static final Blog BLOG = new Blog();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BlogRecord> getRecordType() {
		return BlogRecord.class;
	}

	/**
	 * The column <code>blogdb.blog.idBlog</code>.
	 */
	public final TableField<BlogRecord, Integer> IDBLOG = createField("idBlog", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>blogdb.blog.comment</code>.
	 */
	public final TableField<BlogRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>blogdb.blog.date</code>.
	 */
	public final TableField<BlogRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * The column <code>blogdb.blog.idKateg</code>.
	 */
	public final TableField<BlogRecord, Integer> IDKATEG = createField("idKateg", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>blogdb.blog.username</code>.
	 */
	public final TableField<BlogRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * Create a <code>blogdb.blog</code> table reference
	 */
	public Blog() {
		this("blog", null);
	}

	/**
	 * Create an aliased <code>blogdb.blog</code> table reference
	 */
	public Blog(String alias) {
		this(alias, BLOG);
	}

	private Blog(String alias, Table<BlogRecord> aliased) {
		this(alias, aliased, null);
	}

	private Blog(String alias, Table<BlogRecord> aliased, Field<?>[] parameters) {
		super(alias, Blogdb.BLOGDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<BlogRecord, Integer> getIdentity() {
		return Keys.IDENTITY_BLOG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BlogRecord> getPrimaryKey() {
		return Keys.KEY_BLOG_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BlogRecord>> getKeys() {
		return Arrays.<UniqueKey<BlogRecord>>asList(Keys.KEY_BLOG_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Blog as(String alias) {
		return new Blog(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Blog rename(String name) {
		return new Blog(name, null);
	}
}
