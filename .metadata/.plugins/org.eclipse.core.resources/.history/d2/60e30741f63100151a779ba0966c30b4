/**
 * This class is generated by jOOQ
 */
package org.gradle.bioskopdb.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.bioskopdb.Bioskopdb;
import org.gradle.bioskopdb.Keys;
import org.gradle.bioskopdb.tables.records.MestoRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mesto extends TableImpl<MestoRecord> {

	private static final long serialVersionUID = -1162263700;

	/**
	 * The reference instance of <code>bioskopdb.mesto</code>
	 */
	public static final Mesto MESTO = new Mesto();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MestoRecord> getRecordType() {
		return MestoRecord.class;
	}

	/**
	 * The column <code>bioskopdb.mesto.idMesto</code>.
	 */
	public final TableField<MestoRecord, Integer> IDMESTO = createField("idMesto", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.mesto.idKorisnik</code>.
	 */
	public final TableField<MestoRecord, Integer> IDKORISNIK = createField("idKorisnik", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.mesto.idProjekcija</code>.
	 */
	public final TableField<MestoRecord, Integer> IDPROJEKCIJA = createField("idProjekcija", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>bioskopdb.mesto</code> table reference
	 */
	public Mesto() {
		this("mesto", null);
	}

	/**
	 * Create an aliased <code>bioskopdb.mesto</code> table reference
	 */
	public Mesto(String alias) {
		this(alias, MESTO);
	}

	private Mesto(String alias, Table<MestoRecord> aliased) {
		this(alias, aliased, null);
	}

	private Mesto(String alias, Table<MestoRecord> aliased, Field<?>[] parameters) {
		super(alias, Bioskopdb.BIOSKOPDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MestoRecord> getPrimaryKey() {
		return Keys.KEY_MESTO_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MestoRecord>> getKeys() {
		return Arrays.<UniqueKey<MestoRecord>>asList(Keys.KEY_MESTO_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<MestoRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<MestoRecord, ?>>asList(Keys.MESTO_IBFK_1, Keys.MESTO_IBFK_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Mesto as(String alias) {
		return new Mesto(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Mesto rename(String name) {
		return new Mesto(name, null);
	}
}
