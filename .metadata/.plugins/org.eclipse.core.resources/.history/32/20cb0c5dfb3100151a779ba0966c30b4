/**
 * This class is generated by jOOQ
 */
package org.gradle.tim1.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.tim1.Keys;
import org.gradle.tim1.Tim1;
import org.gradle.tim1.tables.records.CommentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

	private static final long serialVersionUID = 432140331;

	/**
	 * The reference instance of <code>tim1.comment</code>
	 */
	public static final Comment COMMENT = new Comment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CommentRecord> getRecordType() {
		return CommentRecord.class;
	}

	/**
	 * The column <code>tim1.comment.idComment</code>.
	 */
	public final TableField<CommentRecord, Integer> IDCOMMENT = createField("idComment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>tim1.comment.mail</code>.
	 */
	public final TableField<CommentRecord, String> MAIL = createField("mail", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>tim1.comment.text</code>.
	 */
	public final TableField<CommentRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>tim1.comment.date</code>.
	 */
	public final TableField<CommentRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>tim1.comment.idArticle</code>.
	 */
	public final TableField<CommentRecord, Integer> IDARTICLE = createField("idArticle", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>tim1.comment</code> table reference
	 */
	public Comment() {
		this("comment", null);
	}

	/**
	 * Create an aliased <code>tim1.comment</code> table reference
	 */
	public Comment(String alias) {
		this(alias, COMMENT);
	}

	private Comment(String alias, Table<CommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Comment(String alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
		super(alias, Tim1.TIM1, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CommentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_COMMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CommentRecord> getPrimaryKey() {
		return Keys.KEY_COMMENT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CommentRecord>> getKeys() {
		return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CommentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT_IBFK_3, Keys.COMMENT_IBFK_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Comment as(String alias) {
		return new Comment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Comment rename(String name) {
		return new Comment(name, null);
	}
}
