/**
 * This class is generated by jOOQ
 */
package org.gradle.bioskopdb.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gradle.bioskopdb.Bioskopdb;
import org.gradle.bioskopdb.Keys;
import org.gradle.bioskopdb.tables.records.KorisnikRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Korisnik extends TableImpl<KorisnikRecord> {

	private static final long serialVersionUID = 537670121;

	/**
	 * The reference instance of <code>bioskopdb.korisnik</code>
	 */
	public static final Korisnik KORISNIK = new Korisnik();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<KorisnikRecord> getRecordType() {
		return KorisnikRecord.class;
	}

	/**
	 * The column <code>bioskopdb.korisnik.idKorisnik</code>.
	 */
	public final TableField<KorisnikRecord, Integer> IDKORISNIK = createField("idKorisnik", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.korisnik.ime</code>.
	 */
	public final TableField<KorisnikRecord, String> IME = createField("ime", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.korisnik.prezime</code>.
	 */
	public final TableField<KorisnikRecord, String> PREZIME = createField("prezime", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.korisnik.username</code>.
	 */
	public final TableField<KorisnikRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.korisnik.password</code>.
	 */
	public final TableField<KorisnikRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>bioskopdb.korisnik.stanjeRacuna</code>.
	 */
	public final TableField<KorisnikRecord, Integer> STANJERACUNA = createField("stanjeRacuna", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>bioskopdb.korisnik</code> table reference
	 */
	public Korisnik() {
		this("korisnik", null);
	}

	/**
	 * Create an aliased <code>bioskopdb.korisnik</code> table reference
	 */
	public Korisnik(String alias) {
		this(alias, KORISNIK);
	}

	private Korisnik(String alias, Table<KorisnikRecord> aliased) {
		this(alias, aliased, null);
	}

	private Korisnik(String alias, Table<KorisnikRecord> aliased, Field<?>[] parameters) {
		super(alias, Bioskopdb.BIOSKOPDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<KorisnikRecord, Integer> getIdentity() {
		return Keys.IDENTITY_KORISNIK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<KorisnikRecord> getPrimaryKey() {
		return Keys.KEY_KORISNIK_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<KorisnikRecord>> getKeys() {
		return Arrays.<UniqueKey<KorisnikRecord>>asList(Keys.KEY_KORISNIK_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Korisnik as(String alias) {
		return new Korisnik(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Korisnik rename(String name) {
		return new Korisnik(name, null);
	}
}
